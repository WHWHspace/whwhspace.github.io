---
title:  "maven 依赖冲突问题及解决方式"
date:   2016-05-11 15:04:23
categories: [maven]
tags: [maven]
---


在使用 maven 的时候，我们有可能会遇到 `NoSuchMethodError` 或 `ClassNotFoundException` 之类的问题。


## 原因

当我们在 maven 配置文件中配置完一项依赖之后，maven 可以帮助我们自动添加该依赖。 maven 也会把该依赖所依赖的 libraries 添加进来。

这样一来，项目中就会出现多个版本的依赖。比如说（A -> B -> C -> D 2.0）、(A -> E -> D 1.0)，项目中就会出现两个 D 的依赖（D 1.0 和 D 2.0）。

maven2 采用 ‘nearest definition’ 策略来决定到底选用哪个版本的依赖。以上面的为例， 在构建项目 A 的时候，D 1.0 到 A 的距离比 D 2.0 近，所以 A 会使用 D 1.0 的版本。

如果 D 1.0 和 D 2.0 到 A 的距离是相同的话（A -> D 1.0）、(A -> D 2.0)，在 maven 2.0.8 版本之前不能确定到底会使用哪个版本，在 maven 2.0.9 之后会根据它们在配置文件中声明的顺序，使用先声明的依赖,也就是 D 1.0。 

当 A 使用了 D 1.0 版本之后，由于 C 需要使用的是 D 2.0 版本，1.0 版本可能不包含 2.0 版本的 class 和 method（一般情况下新版本会包含旧版本的 class 和 method，旧版本不一定会有新版本的），所以就会产生上面的问题。


## 解决方案

1. 在 A 中直接添加 D 2.0 的依赖。
    > 添加 A -> D 2.0 之后， D 2.0 的距离就比 D 1.0 更近了，自然就会使用 D 2.0 版本。

2. 在 E 中排除 D 1.0。
    > 配置 E 的时候可以把 D 1.0 作为 exclusion，这样 A 就不会添加 D 1.0 的依赖了。


## 思考

 虽然几率很小，但是有没有可能出现下面的情况：
 
 如果 D 2.0 并不兼容 D 1.0， 那么到底要怎么办呢？




